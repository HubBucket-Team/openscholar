<?php

namespace Drupal\cp_settings\Form;


use Drupal\Core\Access\AccessResult;
use Drupal\Core\Access\AccessResultInterface;
use Drupal\Core\Config\ConfigFactoryInterface;
use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\cp_settings\Annotation\CpSetting;
use Drupal\cp_settings\CpSettingInterface;
use Drupal\cp_settings\Plugin\CpSettingsManagerInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

class CpSettingsForm extends ConfigFormBase {

  /** @var CpSettingsManagerInterface */
  protected $cpSettingsManager;

  /** @var CpSetting[] */
  protected $plugins;

  public function __construct (ConfigFactoryInterface $config_factory, CpSettingsManagerInterface $cpSettingsManager) {
    parent::__construct ($config_factory);
    $this->cpSettingsManager = $cpSettingsManager;
  }

  public static function create (ContainerInterface $container) {
    return new static(
      $container->get('config.factory'),
      $container->get('cp_settings.manager')
    );
  }

  public function access(AccountInterface $account) {
    $plugins = $this->getPlugins();
    /** @var AccessResultInterface $access */
    $access = AccessResult::neutral ();
    /** @var CpSettingInterface $cp */
    foreach ($plugins as $cp) {
      $access = $access->orIf ($cp->access ($account));
    }
    return $access;
  }

  protected function getPlugins() {
    if (!isset($this->plugin)) {
      $group = $this->getRequest ()->get ('setting_group');
      $this->plugins = $this->cpSettingsManager->getPluginsForGroup ($group);
    }
    return $this->plugins;
  }
  /**
   * @inheritDoc
   */
  public function getFormId () {
    return 'cp_settings_form';
  }

  /**
   * @inheritDoc
   */
  protected function getEditableConfigNames () {
    $plugins = $this->getPlugins();
    $config = [];
    /** @var CpSettingInterface $p */
    foreach ($plugins as $p) {
      $config = array_merge($p->getEditableConfigNames ());
    }
    return $config;
  }

  public function buildForm (array $form, FormStateInterface $form_state) {
    $form = parent::buildForm ($form, $form_state);

    /** @var CpSettingInterface[] $plugins */
    $plugins = $this->getPlugins ();
    foreach ($plugins as $p) {
      $p->getForm ($form, $this->configFactory);
    }

    return $form;
  }

  public function submitForm (array &$form, FormStateInterface $form_state) {

    /** @var CpSettingInterface[] $plugins */
    $plugins = $this->getPlugins ();
    foreach ($plugins as $p) {
      $p->submitForm ($form_state, $this->configFactory);
    }

    parent::submitForm ($form, $form_state); // TODO: Change the autogenerated stub
  }

}