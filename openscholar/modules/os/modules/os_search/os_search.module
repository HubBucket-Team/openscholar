<?php

/**
 * Implements hook_search_api_results_alter().
 *
 * Alter the search results before they are returned.
 *
 * @param array $results
 *   The results returned by the server, which may be altered. The data
 *   structure is the same as returned by SearchApiQueryInterface::execute().
 * @param SearchApiQueryInterface $query
 *   The search query that was executed.
 */

// os_search_solr_apachesolr_search_page_alter
// os_search_solr_apachesolr_process_results
function os_search_search_api_results_alter(array &$results, SearchApiQueryInterface $query) {
  if (empty($results)) {
    return;
  }
  if (!module_exists('vsite')) {
    // No VSite enabled.
    return;
  }
  if (!vsite_get_vsite()) {
    // Not inside a VSite context.
    return;
  }
}

/**
 * Implements hook_search_api_query_alter().
 *
 * Lets modules alter a search query before executing it.
 *
 * @param SearchApiQueryInterface $query
 *   The search query being executed.
 */

// os_search_solr_apachesolr_query_alter
// os_search_solr_apachesolr_query_prepare
function os_search_search_api_query_alter(SearchApiQueryInterface &$query) {
  if (module_exists('vsite') && ($vsite = spaces_get_space())) {
    // This site.
    $sites = array('"' . $vsite->group_type . ":" . $vsite->id . '"');

    if (variable_get('os_search_solr_include_subsites') || variable_get('os_search_solr_search_sites')) {
      ctools_include('subsite', 'vsite');

      if (variable_get('os_search_solr_include_subsites')) {
        // Get Subsites.
        $subsites = vsite_get_subsites($vsite);
        foreach ($subsites as $sid) {
          $sites[] = '"' . $vsite->group_type . ":" . $sid . '"';
        }
      }

      if (variable_get('os_search_solr_search_sites')) {
        // Parse the list of 'other sites'.
        foreach (variable_get('os_search_solr_search_sites', array()) as $sid) {
          if (intval($sid)) {
            $sites[] = '"' . $vsite->group_type . ":" . $sid . '"';
          }
        }
      }
    }

    // Filter to the specified sites.
    // $site_filter = '(' . implode(' OR ', $sites) . ')';
    // $query->condition('sm_og_group_ref', $site_filter, '=');

    $group_wrapper = entity_metadata_wrapper('node', $vsite->group);

    $is_vsite_access = (module_exists('vsite_access') && !empty($group_wrapper->{VSITE_ACCESS_FIELD}) && $group_wrapper->{VSITE_ACCESS_FIELD}->value());
    $is_administer_group = (user_access('administer group') || og_is_member('node', $group_wrapper->getIdentifier()));

    if (!$is_vsite_access && !$is_administer_group) {
      $query->condition('bs_private', 1, '=');
    }

    // Bundles which belong for disabled apps should appear in the search.
    if ($bundles = array_keys(os_get_bundles(array(OS_DISABLED_APP)))) {
      $bundles_filter = '(' . implode(' OR ', $bundles) . ')';
      $query->condition('bundle', $bundles_filter, '=');
    }
  }
  elseif (variable_get('file_default_scheme', 'public') == 'private') {
    // We are not in a vsite, and we are in a private install.
    drupal_access_denied();
    drupal_exit();
  }

  if (!variable_get('os_search_solr_query_multisites', FALSE)) {
    // Limit searches to just this OpenScholar install in shared indexes.
    // query->condition('hash', apachesolr_site_hash(), '=');
  }
}

/**
 * Implements hook_search_api_item_type_info_alter().
 *
 * Alter the item type info.
 *
 * Modules may implement this hook to alter the information that defines an
 * item type. All properties that are available in
 * hook_search_api_item_type_info() can be altered here, with the addition of
 * the "module" key specifying the module that originally defined the type.
 *
 * @param array $infos
 *   The item type info array, keyed by type identifier.
 *
 * @see hook_search_api_item_type_info()
 */

// os_search_solr_apachesolr_entity_info_alter
function os_search_search_api_item_type_info_alter(array &$infos) {

}

/**
 * Implements hook_search_api_data_type_info_alter().
 *
 * Alter the data type info.
 *
 * Modules may implement this hook to alter the information that defines a data
 * type, or to add/remove some entirely. All properties that are available in
 * hook_search_api_data_type_info() can be altered here.
 *
 * @param array $infos
 *   The data type info array, keyed by type identifier.
 *
 * @see hook_search_api_data_type_info()
 */

// os_search_solr_apachesolr_field_mappings_alter
function os_search_search_api_data_type_info_alter(array &$infos) {

}