<?php

/**
 * @file
 * Customisations for Os Events.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;
use Drupal\Core\Cache\RefinableCacheableDependencyInterface;

/**
 * Implemets hook_preprocess_page().
 */
function os_events_preprocess_page(&$variables) {
  $node = $variables['node'] ?? NULL;
  if ($node && $node->bundle() == 'events' && !$node->field_signup->value) {
    unset($variables['page']['content']['registration']);
  }
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function os_events_menu_local_tasks_alter(&$data, $route_name, RefinableCacheableDependencyInterface &$cacheability) {

  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node && $node->access('update') !== TRUE) {
    return;
  }

  if ($node instanceof NodeInterface && $node->bundle() == 'events') {
    if ($data['tabs'][0]) {
      foreach ($data['tabs'][0] as $task => $tab) {
        if (strpos($task, 'rng') !== FALSE && !$node->field_signup->value) {
          unset($data['tabs'][0][$task]);
        }
        unset($data['tabs'][0]['rng.local_tasks:rng.event.node.register.type_list']);
        if (strpos($task, 'rng.event.node.event') !== FALSE) {
          $data['tabs'][0][$task]['#link']['title'] = t("Manage Registrations");
        }
        if ($task == 'views_view:view.rng_registrations_node.page_1') {
          unset($data['tabs'][0][$task]);
        }
      }
    }
    if (isset($data['tabs'][1])) {
      unset(
        $data['tabs'][1]['rng.local_tasks:rng.event.node.event.access'],
        $data['tabs'][1]['rng.local_tasks:rng.event.node.event.group.list'],
        $data['tabs'][1]['rng_date_scheduler.local_tasks:rng.event.node.event.date_scheduler']
      );
      $data['tabs'][1]['rng.local_tasks:rng.event.node.event.messages']['#link']['title'] = t("Email Registrants");
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function os_events_node_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() != 'events') {
    return;
  }
  if (check_registrations_status($entity)) {
    $build['registration_signup']['#markup'] = os_events_generate_modal_register_link($entity);
    $build['registration_signup']['#weight'] = 20;
  }
}

/**
 * Checks if new registrations are allowed based on different settings status.
 */
function check_registrations_status($entity) {
  $eventManager = \Drupal::service('rng.event_manager');
  $eventMeta = $eventManager->getMeta($entity);

  $eventMeta->isAcceptingRegistrations() ? $flag = TRUE : $flag = FALSE;
  $eventMeta->remainingCapacity() > 0 ? $flag = TRUE : $flag = FALSE;

  return $flag;
}

/**
 * Generate Registration link.
 *
 * @param \Drupal\Core\Entity\EntityInterface $node
 *   The node entity.
 *
 * @return string
 *   The Signup link.
 */
function os_events_generate_modal_register_link(EntityInterface $node) {

  $url = Url::fromRoute('os_events.signup_modal_form', ['nid' => $node->id()], [
    'attributes' => [
      'class' => ['use-ajax'],
      'data-dialog-type' => 'modal',
      'data-dialog-options' => json_encode(['width' => '100%']),
      'id' => 'events_signup_modal_form',
    ],
  ]);
  $link = Link::fromTextAndUrl('Signup for this event', $url)->toString();
  return $link;
}
