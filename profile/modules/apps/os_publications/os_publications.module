<?php

/**
 * @file
 * Bibcite customizations for Openscholar.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_views_data_alter().
 */
function os_publications_views_data_alter(array &$data) {
  $data['bibcite_reference']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'field' => [
      'id' => 'os_publications_first_letter_last_name_author',
    ],
  ];

  $data['bibcite_contributor']['first_letter_last_name_author'] = [
    'title' => t("First letter of Author's last name"),
    'sort' => [
      'id' => 'os_publications_first_letter_last_name_author',
      'field' => 'last_name',
    ],
  ];
}

/**
 * Implements hook_views_query_alter().
 */
function os_publications_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() === 'publications') {
    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        // Alter values passed to reference_type condition.
        if ($condition['field'] === 'bibcite_reference.type') {
          /** @var \Drupal\Core\Config\ImmutableConfig $os_publication_settings */
          $os_publication_settings = \Drupal::config('os_publications.settings');
          /** @var array $allowed_publication_types */
          $allowed_publication_types = $os_publication_settings->get('os_publications_filter_publication_types');

          // Convert the array structure into views suitable format.
          // Array structure obtained from config is:
          // [
          // 'artwork' => 'artwork',
          // 'journal' => 'journal',
          // 'software' => 0,
          // ]
          // While views expects it to be like:
          // [
          // 0 => 'artwork',
          // 1 => 'journal',
          // ].
          $condition['value'] = array_filter(array_values($allowed_publication_types));
        }
      }
    }
  }
}

/**
 * Implements hook_page_attachments().
 */
function os_publications_page_attachments(array &$page) {
  $current_route = \Drupal::routeMatch();

  // Drupal has fetched the entity for us already.
  $entities = $current_route->getParameters();

  if ($entities->has('bibcite_reference') && !strpos($current_route->getRouteName(), 'edit_form')) {
    if ($entities) {
      foreach ($entities as $entity => $value) {
        $types[] = $entity;
        $entity_id[$entity] = $value->id();
      }
    }
    // @todo Implement checks if the entity is to be made available to GoogleScholar and if googlescholar is enabled
    $type = \Drupal::service('os_publications.manager_citation_distribute');
    $plugins = $type->getDefinitions();

    foreach ($plugins as $plugin) {
      if (in_array('bibcite_reference', $types)) {
        if (isset($plugin['type']) && $plugin['type'] == 'metadata') {
          $service = $type->createInstance($plugin['id']);
          if ($service && method_exists($service, 'render')) {
            $meta = $service->render($entity_id['bibcite_reference']);
          }
        }
      }
      $head = $meta;
      foreach ($head as $key => $item) {
        $page['#attached']['html_head'][] = [$item, $key];
      }
    }
  }
}

/**
 * Implements hook_views_pre_render().
 */
function os_publications_views_pre_render(ViewExecutable $view) {
  if ($view->id() !== 'publications') {
    return;
  }

  foreach ($view->field as $field_name => $field) {
    // Alter the citation style as per settings.
    if ($field_name === 'citation') {
      /** @var \Drupal\Core\Config\ImmutableConfig $bibcite_settings */
      $bibcite_settings = \Drupal::config('bibcite.settings');
      /** @var string $publication_style */
      $publication_style = $bibcite_settings->get('default_style');

      $field->options['csl_style'] = $publication_style;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function os_publications_bibcite_reference_presave(EntityInterface $entity) {
  /** @var \Drupal\os_publications\PublicationsListingHelperInterface $publications_listing_helper */
  $publications_listing_helper = \Drupal::service('os_publications.listing_helper');

  $entity->set('field_title_first_char_excl_prep', [
    'value' => $publications_listing_helper->convertLabel($entity->label()),
  ]);
}
