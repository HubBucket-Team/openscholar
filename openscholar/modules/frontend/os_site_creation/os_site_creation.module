<?php

define('OS_SITE_CREATION_FORM', '1.0.0');

/**
 * Implements hook_menu().
 */
function os_site_creation_menu() {
  $items['sitecreation/validate/%'] = array(
    'page callback' => '_os_site_creation_get_exiting_sites',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  $items['sitecreation/savedata'] = array(
    'page callback' => '_os_site_save_data',
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );

  return $items;
}

/**
 * Callback save site creation data.
 */
function _os_site_save_data() {
  $postData = json_decode($_POST['formdata']);

  ctools_include('user', 'os');
  ctools_include('vsite', 'vsite');
  $values = &drupal_static('vsite_register_form_values');

  if($postData->individualScholar != "") {
    $values['bundle'] = 'personal';
    $values['domain'] = $postData->individualScholar;
  } else if($postData->projectLabSmallGroup != "") {
    $values['bundle'] = 'project';
    $values['domain'] = $postData->projectLabSmallGroup;
  } else {
    $values['bundle'] = 'department';
    $values['domain'] = $postData->departmentSchool;
  }
  $values['preset'] = $postData->contentOption;
  $values['vsite_private'] = $postData->vsite;

  // The site has created on the behalf of a new user.
  $new_user = FALSE;

  // If the specified user account already exists...
  if ($values['vicarious_user'] && $values['existing_username']) {
    // Loads that user account as site owner.
    $site_owner = user_load_by_name($values['existing_username']);
  }
  elseif (($values['vicarious_user'] && !$values['existing_username']) || (!$values['vicarious_user'] && $values['name'])) {
    // Create user for current logged in user or on someone else's behalf.
    $user_options = array(
      'name' => $values['name'],
      'pass' => $values['password'],
      'mail' => $values['mail'],
      'status' => 1,
      'field_first_name' => $values['first_name'],
      'field_last_name' => $values['last_name'],
    );
    $site_owner = os_user_create($user_options);

    // We created a new user. After creating the vsite we'll grant him the vsite
    // admin role.
    $new_user = TRUE;

    // Send out an email to notify the user of the newly created account.
    // Email only sent if user requested to be notified of new account.
    // if ($values['notify']) {
    //  _user_mail_notify('register_no_approval_required', $site_owner);
    // }

    // Logs in as the new user, if we're not already logged in.
    global $user;
    if ($user->uid == 0) {
      $user = $site_owner;
      user_login_finalize($state);
    }
  }
  else {
    // Creates site for current logged in user. No need to create a new user.
    global $user;
    $site_owner = $user;
  }

  // Creates the vsite node.
  $parent = FALSE;

  $name = $purl = $values['domain'];
  $author = $site_owner->uid;
  $bundle = $values['bundle'];
  $preset = $values['preset'];
  $visibility = isset($values['vsite_private']) ? $values['vsite_private'] : FALSE;
  $state['additional_settings'] = empty($state['additional_settings']) ? array() : $state['additional_settings'];
  $vsite = vsite_create_vsite($name, $purl, $author, $bundle, $preset, $parent, $visibility, $state['additional_settings']);
  if ($vsite) {
    $message = vsite_register_message($form, $values['domain']);
    $commands[] = ajax_command_replace('#submit-suffix', $message);
    $commands[] = ajax_command_remove('#edit-submit');

    // Grant the proper roles to the user.
    if ($new_user) {
      os_role_grant($site_owner->uid, 'vsite admin', $vsite->nid);
    }

    // If we have gotten to this point, then the vsite registration was success.
    // Clears the errors.
    drupal_get_messages('error');
  }
  else {
    $commands[] = _vsite_register_form_error();
  }

  // Check for a present queued og_tasks batch.
  $batch =& batch_get();
  if ($vsite && $batch) {
    // Run all the batch commands right now.
    $batch['progressive'] = FALSE;
		batch_process();
  }

  print $commands[0]['data'];
  exit;
}

/**
 * Callback to return JSON encoded output.
 */
function _os_site_creation_get_exiting_sites($siteValue) {
  //Validate new vsite URL
  if (strlen($siteValue) < 3 || !valid_url($siteValue)) {
    drupal_json_output("Invalid");
  }
  else if (($purl = purl_load(array('value' => $siteValue, 'provider' => 'spaces_og'), TRUE)) || menu_get_item($siteValue)) {
    drupal_json_output("Not-Available");
  }
  else {
    drupal_json_output("Available");
  }
}


/**
 * Implements hook_library().
 */
function os_site_creation_library() {
  $libs = array();
  $self = drupal_get_path('module', 'os_site_creation');
  $disable = array('alias' => TRUE);
  $libs['site_creation'] = array(
    'title' => 'Site Creation Form',
    'version' => OS_SITE_CREATION_FORM,
    'js' => array(
      $self.'/misc/osSiteCreation.module.js' => array(),
      $self.'/misc/os_site_creation.js' => array(),
      $self.'/misc/messages.min.js' => array(),
      array(
        'data' => array(
          'paths' => array(
            'siteCreationForm' => url($self.'/templates', $disable),
            'siteCreationModuleRoot' => url(drupal_get_path('module', 'os_site_creation'), $disable),
          ),
          'version' => array(
            'siteCreationForm' => OS_SITE_CREATION_FORM,
          )
        ),
        'type' => 'setting',
      )
    ),
    'css' => array(
      drupal_get_path('module', 'os_site_creation') . '/misc/os_site_creation.css' => array(
      'group' => CSS_THEME,
      'every_page' => TRUE,
      'media' => 'screen'),
    ),
    'dependencies' => array(
      array('os_common', 'angular-modal-service'),
      array('os_common', 'formElement'),
      array('os_common', 'buttonSpinner'),
      array('ap_settings_form', 'redirect')
    )
  );
  return $libs;
}

/**
 * Implements hook_library_alter().
 *
 */
function os_site_creation_library_alter(&$libs) {
  if (isset($libs['admin_panel'])) {
    $libs['admin_panel']['dependencies'][] = array('os_site_creation', 'site_creation');
  }
}
