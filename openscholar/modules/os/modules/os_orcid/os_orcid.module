<?php
/**
 * os_orcid.module
 */

/**
 * Implements hook_cp_settings().
 *
 * Sets the form for getting the orcid id.
 */
function os_orcid_cp_settings() {

  // Settings variable to be used for form elements.
  $settings = array();

  // Get the current space.
  if( module_exists('spaces')){
    $space = spaces_get_space();
  }

  $settings['orcid_id'] = array(
    'group' => array(
      '#id' => 'feature_os_publication',
      '#title' => t('Publications'),
      '#menu_parent' => 'app_settings',
      '#help_link' => l(t('Learn more about publications'), '', array('attributes' => array('target' => '_blank'))),
    ),
    'form' => array(
      '#type' => 'textfield',
      '#default_value' => variable_get('orcidId'),
      '#title' => t('ORCID ID'),
      '#prefix' => '<label>Recurring Import From</label>',
      '#description' => t('Enter your ORCID ID, It is in the format XXXX-XXXX-XXXX-XXXX and is available at <a href="http://orcid.org">http://orcid.org</a>.  When this is set, your publication information will be imported to your site.'),
      '#column' => 'right',
      '#weight' => 1,
    ),
  );

  $settings['orcid_sync'] = array(
    'group' => array(
      '#id' => 'feature_os_publication',
      '#title' => t('Publications'),
      '#menu_parent' => 'app_settings',
      '#help_link' => l(t('Learn more about publications'), '', array('attributes' => array('target' => '_blank'))),
    ),
    'form' => array(
      '#type' => 'checkbox',
      '#default_value' => variable_get('orcid_sync_status'),
      '#title' => t('Sync ORCID'),
      '#column' => 'right',
      '#weight' => 2,
    ),
    'rest_submit' => '_os_orcid_manage_orcid_submit',
    'submit_full_request' => TRUE,
  );
  return $settings;
}

/***** SUBMIT FUNCTIONS ******/

/**
 * Submit callback to import/update from orcid.
 */
function _os_orcid_manage_orcid_submit($var, $value) {
  if (is_array($var)) {
    $orcid_id = "";
    // Set variable to store the orcid_id from the form.
    if (isset($var['orcid_id'])) {
      $orcid_id = $var['orcid_id'];
    }

    // Get vsite id
    $vsite = vsite_get_vsite();

    if($orcid_id == ""){
      if(module_exists('spaces')){
        // Get the current space.
        $space = spaces_get_space();
        // Update the orcid_id for the user space.
        $space->controllers->variable->del('orcidId', $orcid_id);
      }
      else{
        variable_del('orcidId', $orcid_id);
      }
    }
    else {
      if(!preg_match('/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9A-Z]{4}$/', $orcid_id)) {
        drupal_set_message(t('Your ORCID id must match the pattern XXXX-XXXX-XXXX-XXXX.'), 'error');
        return false;
      }
      else {
         if(module_exists('spaces')){
          $space = spaces_get_space();
          $space->controllers->variable->set('orcidId', $orcid_id);
        }
        else{
          variable_set('orcidId', $orcid_id);
        }
      }
    }
    if ($var['orcid_sync'] == 1) {
      $orcid_sync_status = 1;
    } else {
      $orcid_sync_status = 0;
      // If Orcid sync is OFF then $orcid_id should be blank so that it can't process further.
      $orcid_id = '';
    }
    // Set orcid_sync_status variable
    if(module_exists('spaces')){
      $space = spaces_get_space();
      $space->controllers->variable->set('orcid_sync_status', $orcid_sync_status);
    } else {
      variable_set('orcid_sync_status', $orcid_sync_status);
    }

    $orcidIdtoProcess = variable_get('orcidIdtoProcess');
    if ($orcid_id == "") {
      // If it was already inserted into the array for processing
      // then remove the element from array
      if (array_key_exists($vsite->group->nid, $orcidIdtoProcess)) {
        unset($orcidIdtoProcess[$vsite->group->nid]);
      }
    } else {
      // Add the orcid value into the array with "vsiteid" key
      // Also concatenating user id with the orcid id so that it can be tracked in hook_cron()
      global $user;
      $user_id = $user->uid;
      $orcidIdtoProcess[$vsite->group->nid] = array('orcid_id' => $orcid_id, 'user_id' => $user_id);
      // Finally set the orcidIdtoProcess variable
      variable_set('orcidIdtoProcess', $orcidIdtoProcess);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Queues orcid-data for updates.
 */
function os_orcid_cron(){

  $getStack = variable_get('orcidIdtoProcess');
  if(count($getStack) > 0){

    //Array to be added to the queue for processing
    foreach($getStack as $vsite => $orcidId) {
      // Get all works for individual Orcid Id into array
      $works = _os_orcid_get_orcid_from_api($orcidId['orcid_id']);
      foreach($works as $work){
        $orcidDataToProcess[] = array('orcidId' => $orcidId['orcid_id'], 'vsite' => $vsite, 'work' => $work, 'user_id' => $orcidId['user_id']);
      }
    }

    //Setup drupal the drupal queue
    $queue = DrupalQueue::get("syncOrcidData");
    foreach ($orcidDataToProcess as $data) {
      $queue->createItem($data);
    }
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function os_orcid_cron_queue_info() {

  $queues['syncOrcidData'] = array (
    'worker callback' => 'os_orcid_resync_item',
    'time' => 60,
  );
  return $queues;
}

/**
 * Function to import the orcid-data.
 */
function os_orcid_resync_item($data) {
  if (!isset($data['orcidId']) || !isset($data['vsite'])) {
    return;
  }

  $biblio_types = _os_orcid_get_biblio_types();
  $work_feed = $data['work'];
  $user_id = $data['user_id'];
  $vsite = $data['vsite'];

  if (is_array($work_feed['@attributes'])) {
    // For single bibilo, Orcid doesn't return array but returns array for multiple enties
    $works[0] = $work_feed;
  } else {
    $works = $work_feed;
  }
  foreach ($works as $work) {
    $biblio_type = 102;
    foreach($biblio_types as $key => $value) {
      if($biblio_types[$key]->name == str_replace('-', ' ', $work['work-type'])) {
        $biblio_type = $biblio_types[$key]->tid;
        break;
      }
    }
    $insert = true;
    // If there is a journal-title, set the node title, otherwise use the title.
    $work_title = $work['work-title']['title'];

    $query = db_select('biblio', 'b')
              ->condition('b.biblio_type', $biblio_type)
              ->condition('b.biblio_sort_title', $work_title)
              ->condition('b.biblio_url', $work['source']['source-orcid']['uri']);
    $query->leftJoin('og_membership', 'og', 'og.etid = b.nid');
    $query = $query->fields('b', array('nid'))
              ->condition('og.gid', $vsite);
    $biblios = $query->execute()->fetchAll();
    $all_biblios = array_unique($biblios, SORT_REGULAR);
    if(count($all_biblios) > 0) {
      $insert = false;
      foreach($all_biblios as $bilbio) {
        // Get the Biblio id to update
        $nid = $bilbio->nid;
      }
    }
    // Setup the new node.
    $node = new stdClass();

    $node->title = $work_title;

    $node->type = 'biblio';

    // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    node_object_prepare($node);

    // Set the language.
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled

    // Turn off comments.
    $node->comment = 0;

    // Set the biblio title.
    $node->biblio_sort_title = $work_title;

    // Set the title field.
    $node->title_field[LANGUAGE_NONE][0]['value'] = $work_title;
    $node->title_field[LANGUAGE_NONE][0]['format'] = 'title_filter';
    $node->title_field[LANGUAGE_NONE][0]['safe_value'] = $work_title;

    // Set the secondary title
    $node->biblio_secondary_title = $work['journal-title'];

    // Set the year of the publication.
    $node->biblio_year = $work['publication-date']['year'];

    // Set the month of the publication.
    $node->field_biblio_pub_month[LANGUAGE_NONE][0]['value'] = $work['publication-date']['month'];

    // Set the month of the publication.
    $node->field_biblio_pub_day[LANGUAGE_NONE][0]['value'] = $work['publication-date']['day'];

    // Set the URL of the publication.
    $node->biblio_url_title = "Publisher's Version";

    //Set the abstract.
    $node->biblio_abst_e = $work['short-description'];

    //Set the biblio url.
    $node->biblio_url = $work['source']['source-orcid']['uri'];

    // Counter used in for loop.
    $counter = 0;

    // Step through each of the contributors and setup the insertion of contributors.
    if(array_key_exists('work-contributors',$work)){
      foreach($work['work-contributors']['contributor'] as $key => $value) {
        $node->biblio_contributors[$counter]['name'] = $work['work-contributors']['contributor'][$key]['credit-name'];
        $node->biblio_contributors[$counter]['auth_type'] = 1;
        $node->biblio_contributors[$counter]['auth_category'] = 1;
        $counter++;
      }
    }else{
      $node->biblio_contributors[$counter]['name'] = $work['source']['source-name'];
      $node->biblio_contributors[$counter]['auth_type'] = 1;
      $node->biblio_contributors[$counter]['auth_category'] = 1;
    }

    // Step through each biblio type and if it is a match to the orcid type, set it.
    foreach($biblio_types as $type => $biblio_type) {
      if(strtolower($biblio_types[$type]->name) == strtolower(str_replace('-', ' ', $work['work-type']))) {
        $node->biblio_type = $biblio_types[$type]->tid;
      }
    }

    // If there was no biblio type found, set the it to default to journal article.
    if(!isset($node->biblio_type)) {
      $node->biblio_type = 102;
    }

    $node->og_group_ref['und'][0]['target_id'] = $vsite;
      // Save the node.
    if($insert) {
      node_save($node);
      // Increment the imported counter, used in displaying the results.
      $context['results']['imported']++;
    }
    else {
      $node->nid = $nid;
      node_save($node);
      // Increment the exists counter, used in displaying the results.
      $context['results']['exists']++;
    }
  }
}

/****** HELPER FUNCTIONS ******/

/**
 * Helper function to get orcid data from a given url.
 */
function _os_orcid_get_orcid_from_api($orcid_id) {
  // The URL that gets the orcid data from the API.
  $url = 'https://pub.orcid.org/v1.2/' . $orcid_id . '/orcid-works/';
  // Setting the default request options for getting info from the API.
  $default_request_options = array(
    'headers' => array(
      'Accept' => 'application/orcid+xml',
    ),
  );

  // The response from the API.
  $response = drupal_http_request(url($url, array()), $default_request_options);

  // If there is data, process it.
  if ($response->code == "200") {

    // Get the response data into simple XML format.
    $data = new SimpleXMLElement($response->data);

    // Convert the data to json and decode.
    $data = drupal_json_decode(drupal_json_encode($data));

    // Set the variable works to the actual works from ORCID API.
    $works[] = $data['orcid-profile']['orcid-activities']['orcid-works']['orcid-work'];
  }

  return $works;
}

/**
 * Helper function to get orcid data from a given url.
 */
function _os_orcid_get_biblio_types() {
  $biblio_types = db_select('biblio_types', 'bt')
    ->fields('bt', array('tid', 'name'))
    ->execute()
    ->fetchAll();

  foreach($biblio_types as $key => $value) {
    $biblio_types[$key]->name = strtolower($biblio_types[$key]->name);
  }
  return $biblio_types;
}