<?php

/**
 * @file
 * Hook implementations for the os module.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Link;
use Drupal\Core\Session\AccountInterface;
use Drupal\group\Entity\GroupContentType;
use Drupal\media\MediaInterface;

/**
 * Implements hook_library_info_alter().
 */
function os_library_info_alter(&$libraries, $extension) {
  if ($extension == 'core') {
    return;
  }

  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $moduleHandler */
  $moduleHandler = \Drupal::service('module_handler');

  // Filter out themes and profiles or whatever. only modules.
  if (!$moduleHandler->moduleExists($extension)) {
    return;
  }
  $path = drupal_get_path('module', $extension);

  foreach ($libraries as $name => &$lib) {
    if (isset($lib['paths'])) {
      if (strpos($lib['paths'], '/') === 0) {
        $lib['drupalSettings']['paths'][$name] = ltrim($lib['paths'], '/') . '/';
      }
      else {
        $lib['drupalSettings']['paths'][$name] = $path . '/' . $lib['paths'] . '/';
      }
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function os_preprocess_html(&$variables) {
  /** @var \Drupal\os\AngularModuleManagerInterface $ngModuleManager */
  $ngModuleManager = \Drupal::service('angular.module_manager');
  if ($modules = $ngModuleManager->getModules()) {
    $variables['attributes']['ng-app'] = 'openscholar';
    $variables['attributes']['data-ng-modules'] = implode(',', $modules);
    $variables['#attached']['library'][] = 'os/openscholarModule';
  }
}

/**
 * Implements hook_preprocess_block().
 *
 * Replaces 'Drupal' with 'OpenScholar' in the powered by block.
 */
function os_preprocess_block(array &$vars) {
  if (isset($vars['plugin_id']) && $vars['plugin_id'] == 'system_powered_by_block') {
    $vars['content']['#markup'] = '';
    if (\Drupal::currentUser()->isAnonymous()) {
      $vars['content']['#markup'] .= Link::createFromRoute(t('Admin Login'), 'user.login', [], ['query' => \Drupal::destination()->getAsArray()])->toString();
    }
    $vars['content']['#markup'] .= t('<span id="powered-by">Powered by <a href=":link">OpenScholar</a></span>', [':link' => 'https://theopenscholar.com/']);
  }
}

/**
 * Implements hook_entity_create_access().
 *
 * Handles entity create inside group via global paths:
 * - `/node/add/<bundle>`
 * - `/media/add/<bundle>`
 * - `/bibcite/reference/add/<bundle>`
 */
function os_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $vsite */
  $vsite = $vsite_context_manager->getActiveVsite();

  // Let the access stack handle this case.
  if (!$vsite) {
    return AccessResult::neutral();
  }

  $plugin_id = "group_entity:{$context['entity_type_id']}";

  // Nodes follow a different plugin_id structure.
  if ($context['entity_type_id'] === 'node') {
    $plugin_id = "group_node:$entity_bundle";
  }

  // Only act if there are group content types for this node type.
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Pass the judgement here.
  if ($vsite->hasPermission("create $plugin_id entity", $account) && $vsite->hasPermission("create $plugin_id content", $account)) {
    return AccessResult::allowed();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_ENTITY_TYPE_access().
 */
function os_media_access(MediaInterface $entity, $operation, AccountInterface $account) {
  $vsite_context_manager = \Drupal::service('vsite.context_manager');
  /** @var \Drupal\group\Entity\GroupInterface|null $vsite */
  $vsite = $vsite_context_manager->getActiveVsite();

  // Let the access stack handle this case.
  if (!$vsite) {
    return AccessResult::neutral();
  }

  $plugin_id = 'group_entity:media';

  // Only act if there are group content types for this plugin.
  $group_content_types = GroupContentType::loadByContentPluginId($plugin_id);
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // TODO: Remove entry for `media` entities in \os_entity_create_access and
  // TODO: handle it here.
  switch ($operation) {
    case 'update':
    case 'delete':
      if ($vsite->hasPermission("$operation any $plugin_id entity", $account)) {
        return AccessResult::allowed();
      }

      if ($vsite->hasPermission("$operation own $plugin_id entity", $account) &&
        ($account->id() === $entity->getOwner()->id())) {
        return AccessResult::allowed();
      }

      break;
  }

  return AccessResult::neutral();
}
