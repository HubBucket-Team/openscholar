<?php
/**
 * os_orcid.module
 */

/**
 * Implements hook_cp_settings().
 *
 * Sets the form for getting the orcid id.
 */
function os_orcid_cp_settings() {

  // Settings variable to be used for form elements.
  $settings = array();

  // Get the current space.
  if( module_exists('spaces')){
    $space = spaces_get_space();
  }

  $settings['orcid_id'] = array(
    'group' => array(
      '#id' => 'feature_os_publication',
      '#title' => t('Publications'),
      '#menu_parent' => 'app_settings',
      '#help_link' => l(t('Learn more about publications'), '', array('attributes' => array('target' => '_blank'))),
    ),
    'form' => array(
      '#type' => 'textfield',
      '#default_value' => variable_get('orcidId'),
      '#title' => t('ORCID ID'),
      '#description' => t('Enter your ORCID ID, It is in the format XXXX-XXXX-XXXX-XXXX and is available at <a href="http://orcid.org">http://orcid.org</a>.  When this is set, your publication information will be imported to your site.'),
      '#column' => 'right',
      '#weight' => 1,
    ),
    'rest_submit' => '_os_orcid_manage_orcid_submit',
  );
  return $settings;
}

/***** SUBMIT FUNCTIONS ******/

/**
 * Submit callback to import/update from orcid.
 */
function _os_orcid_manage_orcid_submit($var, $value) {
  // Set variable to store the orcid_id from the form.
  $orcid_id = trim($var);

  // Get vsite id
  $vsite = vsite_get_vsite();

  if($orcid_id == ""){
    if(module_exists('spaces')){
      // Get the current space.
      $space = spaces_get_space();
      // Update the orcid_id for the user space.
      $space->controllers->variable->del('orcidId', $orcid_id);
    }
    else{
      variable_del('orcidId', $orcid_id);
    }
  }
  else {
    if(!preg_match('/[0-9]{4}-[0-9]{4}-[0-9]{4}-[0-9A-Z]{4}$/', $orcid_id)) {
      drupal_set_message(t('Your ORCID id must match the pattern XXXX-XXXX-XXXX-XXXX.'), 'error');
      return false;
    }
    else {
      // Get the current space.
       if(module_exists('spaces')){
        // Get the current space.
        $space = spaces_get_space();
        // Update the orcid_id for the user space.
        $space->controllers->variable->set('orcidId', $orcid_id);
      }
      else{
        variable_set('orcidId', $orcid_id);
      }

      drupal_set_message(t('Your ORCID id has been updated. Your orcid data will be imported soon.'), 'status');

      $orcidIdtoProcess = variable_get('orcidIdtoProcess');
      $orcidIdtoProcess[$vsite->group->vid] = $orcid_id;
      variable_set('orcidIdtoProcess', $orcidIdtoProcess);
    }
  }
}

/**
 * Implements hook_cron().
 *
 * Queues orcid-data for updates.
 */
function os_orcid_cron(){
  $getStack = variable_get('orcidIdtoProcess');
  if(count($getStack) > 0){

    //Array to be added to the queue for processing
    foreach($getStack as $vsite => $orcidId) {
      // Get all works for individual Orcid Id into array
      $works = _os_orcid_get_orcid_from_api($orcidId);
      foreach($works as $work){
        $orcidDataToProcess[] = array('orcidId' => $orcidId, 'vsite' => $vsite, 'work' => $work);
      }
    }

    //Setup drupal the drupal queue
    $queue = DrupalQueue::get("syncOrcidData");
    foreach ($orcidDataToProcess as $data) {
      $queue->createItem($data);
    }
  }
  //Delete the variable once all orcid-data has been picked up in the queue for processing
  variable_del('orcidIdtoProcess');
}

/**
 * Implements hook_cron_queue_info().
 */
function os_orcid_cron_queue_info() {
  $queues['syncOrcidData'] = array (
    'worker callback' => 'os_orcid_resync_item',
    'time' => 60,
  );
  return $queues;
}

/**
 * Function to import the orcid-data.
 */
function os_orcid_resync_item($data) {
  $biblio_types = _os_orcid_get_biblio_types();
  $work = $data['work'];

  for($i = 0; $i < count($work); $i++ ) {
    foreach($biblio_types as $key => $value) {
      if($biblio_types[$key]->name == str_replace('-', ' ', $work[$i]['work-type'])) {
        $biblio_type = $biblio_types[$key]->tid;
        break;
      }
    }
  
    if(!isset($biblio_type)) {
      $biblio_type = 102;
    }

    $insert = true;

    // If there is a journal-title, set the node title, otherwise use the title.
    if(isset($work[$i]['journal-title'])) {
      $journaltitle = $work[$i]['journal-title'];
    }
    else {
      $journaltitle = $work[$i]['work-title']['title'];
    }

    $biblios = db_select('biblio', 'b')
      ->fields('b', array('nid'))
      ->condition('b.biblio_type', $biblio_type)
      ->condition('b.biblio_secondary_title', $journaltitle)
      ->condition('b.biblio_year', $work[$i]['publication-date']['year'])
      ->condition('b.biblio_url_title', $work[$i]['source']['source-orcid']['uri'])
      ->execute()
      ->fetchAll();

    if(count($biblios) > 0) {
      foreach($biblios as $biblio) {
        $nodes = db_select('node', 'n')
          ->fields('n', array('nid'))
          ->condition('n.nid', $biblio->nid)
          ->condition('n.uid', _os_orcid_get_vsite_user_id())
          ->execute()
          ->fetchAll();
        if(count($nodes) > 0) {
          $insert = false;
        }
      }
    }

    if($insert) {

      // Setup the new node.
      $node = new stdClass();

      $node->title = $journaltitle;

      $node->type = 'biblio';

      // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      node_object_prepare($node);

      // Set the language.
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled

      // Turn off comments.
      $node->comment = 0;

      // Set the biblio title.
      if(isset($work[$i]['journal-title'])) {
        $node->biblio_sort_title = $journaltitle;
      }
      else {
        $node->biblio_sort_title = $journaltitle;
      }

      // Set the title field.
      $node->title_field[LANGUAGE_NONE][0]['value'] = $journaltitle;
      $node->title_field[LANGUAGE_NONE][0]['format'] = 'title_filter';
      $node->title_field[LANGUAGE_NONE][0]['safe_value'] = $journaltitle;

      // Set the secondary title, which is the full title.
      $node->biblio_secondary_title = $work[$i]['work-title']['title'];

      // Set the year of the publication.
      $node->biblio_year = $work[$i]['publication-date']['year'];

      // Set the URL of the publication.
      $node->biblio_url_title = $work[$i]['source']['source-orcid']['uri'];

      // Counter used in for loop.
      $counter = 0;

      // Step through each of the contributors and setup the insertion of contributors.
      if(array_key_exists('work-contributors',$work[$i])){
        foreach($work[$i]['work-contributors']['contributor'] as $key => $value) {
          $node->biblio_contributors[$counter]['name'] = $work[$i]['work-contributors']['contributor'][$key]['credit-name'];
          $node->biblio_contributors[$counter]['auth_type'] = 1;
          $node->biblio_contributors[$counter]['auth_category'] = 1;
          $counter++;
        }
      }else{
        $node->biblio_contributors[$counter]['name'] = $work[$i]['source']['source-name'];
        $node->biblio_contributors[$counter]['auth_type'] = 1;
        $node->biblio_contributors[$counter]['auth_category'] = 1;
      }

      // Step through each biblio type and if it is a match to the orcid type, set it.
      foreach($biblio_types as $type => $biblio_type) {
        if(strtolower($biblio_types[$type]->name) == strtolower(str_replace('-', ' ', $work[$i]['work-type']))) {
          $node->biblio_type = $biblio_types[$type]->tid;
        }
      }

      // If there was no biblio type found, set the it to default to journal article.
      if(!isset($node->biblio_type)) {
        $node->biblio_type = 102;
      }

      $node->og_group_ref['und'][0]['target_id'] = $data['vsite'];

      // Save the node.
      node_save($node);

      // Increment the imported counter, used in displaying the results.
      $context['results']['imported']++;
    }
    else {

      // Increment the exists counter, used in displaying the results.
      $context['results']['exists']++;
    }
  }
}

/****** HELPER FUNCTIONS ******/

/**
 * Helper function to get orcid data from a given url.
 */
function _os_orcid_get_orcid_from_api($orcid_id) {
  // The URL that gets the orcid data from the API.
  $url = 'https://pub.orcid.org/v1.2/' . $orcid_id . '/orcid-works/';
  // Setting the default request options for getting info from the API.
  $default_request_options = array(
    'headers' => array(
      'Accept' => 'application/orcid+xml',
    ),
  );

  // The response from the API.
  $response = drupal_http_request(url($url, array()), $default_request_options);

  // If there is data, process it.
  if ($response->code == "200") {

    // Get the response data into simple XML format.
    $data = new SimpleXMLElement($response->data);

    // Convert the data to json and decode.
    $data = drupal_json_decode(drupal_json_encode($data));

    // Set the variable works to the actual works from ORCID API.
    $works[] = $data['orcid-profile']['orcid-activities']['orcid-works']['orcid-work'];
  }

  return $works;
}

/**
 * Helper function to get orcid data from a given url.
 */
function _os_orcid_get_biblio_types() {
  $biblio_types = db_select('biblio_types', 'bt')
    ->fields('bt', array('tid', 'name'))
    ->execute()
    ->fetchAll();

  foreach($biblio_types as $key => $value) {
    $biblio_types[$key]->name = strtolower($biblio_types[$key]->name);
  }
  return $biblio_types;
}

/**
 * Helper function to get user id from url.
 */
function _os_orcid_get_vsite_user_id() {
  //Pull from cas_user uid if CAS cas module exists.
  if (module_exists('cas')) {
    // Set the user_id based on whether they are loaded from function or pulled from table.
    if (!$user_loaded) {
      $get_cas_user = db_select('cas_user', 'c')
        ->fields('c', array('uid'))
        ->condition('c.cas_name', $username);

      $cas_user = $get_cas_user->execute()->fetchAll();
      $user_id = FALSE;
      if ($cas_user) {
        $user_id = $cas_user[0]->uid;
      }
    }
  }else {
    global $user;
    $user_id = $user->uid;
  }
  return $user_id;
}
