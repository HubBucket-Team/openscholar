<?php

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_modules_installed().
 * @param array $modules
 */
function vsite_modules_installed(array $modules) {
  vsite_setup_new_apps();
}

/**
 * Sets up associations between app content and group types.
 * @param array $modules
 */
function vsite_setup_new_apps() {
  \Drupal::service('vsite.app.manager')->clearCachedDefinitions();
  $defs = \Drupal::service ('vsite.app.manager')->getDefinitions();

  /** @var \Drupal\group\Entity\Storage\GroupContentTypeStorageInterface $groupContentStorage */
  $groupContentStorage = \Drupal::entityTypeManager ()->getStorage ('group_content_type');
  /** @var \Drupal\group\Plugin\GroupContentEnablerCollection $allPlugins */
  $allPlugins = \Drupal::service('plugin.manager.group_content_enabler')->getAll();
  $group_types =\Drupal::entityTypeManager ()->getStorage('group_type')->loadMultiple ();
  $map = array();
  foreach ($allPlugins as $p) {
    if ($p->getEntityTypeId() == 'node') {
      $map[$p->getEntityBundle()] = $p->getPluginId();
    }
  }
  $existing = $groupContentStorage->loadByEntityTypeId ('node');
  $config = array(
    'group_cardinality' => 1,
    'use_creation_wizard' => 0,
  );

  foreach ($defs as $d) {
    if ($d['entityType'] != 'node') continue;

    foreach ($group_types as $type => $gt) {
      $k = $type.'-group_node-'.$d['bundle'];
      if (empty($existing[$k])) {
        $groupContentStorage->createFromPlugin ($gt, $map[$d['bundle']], $config)->save();
      }
    }
  }
}

function vsite_views_data_alter(&$data) {
  $data['group_content']['current_vsite_filter'] = [
    'title' => t('Current Vsite Filter'),
    'filter' => [
      'title' => t('Current Vsite Filter'),
      'help' => 'Filters content on the current vsite',
      'field' => 'gid',
      'id' => 'vsite_current_filter'
    ]
  ];
}

function vsite_pathauto_alias_alter(&$alias, array &$context) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  /** @var \Drupal\group\Entity\GroupInterface $group */
  if ($group = $vsiteContext->getActiveVsite ()) {
    $purl = $vsiteContext->getActivePurl ();
    $trimmed_alias = ltrim($alias, '/');
    $alias = '/'.$purl.'/'.$trimmed_alias;
  }
}

function vsite_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
  $vsiteContext = \Drupal::service('vsite.context_manager');

  if ($group = $vsiteContext->getActiveVsite ()) {
    /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
    $entity = $form_state->getFormObject ()->getEntity();
    $form_state->set('group', $group);
    $form_state->set('group_content_enabler', 'group_node:'.$entity->bundle ());
    foreach (Element::children($form['actions']) as $name) {

      // Skip buttons without submit handlers.
      if (empty($form['actions'][$name]['#submit'])) {
        continue;
      }

      // Skip buttons that do not properly build and save an entity.
      $submit = $form['actions'][$name]['#submit'];
      if (!in_array('::submitForm', $submit) || !in_array('::save', $submit)) {
        continue;
      }

      // If we are using the wizard, we need to substitute the entity save
      // handler in order to add the entity to the private temp store.
      $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
    }
  }
}

function vsite_form_alter(&$form, FormStateInterface $formState, $form_id) {
  if ($formState->getFormObject () instanceof \Drupal\Core\Entity\EntityFormInterface) {

    /** @var \Drupal\vsite\Plugin\VsiteContextManagerInterface $vsiteContext */
    $vsiteContext = \Drupal::service('vsite.context_manager');

    /** @var \Drupal\group\Entity\GroupInterface $group */
    if ($group = $vsiteContext->getActiveVsite()) {
      $groupTypeId = $group->bundle();

      /** @var \Drupal\group\Plugin\GroupContentEnablerManagerInterface $groupContentEnabler */
      $groupContentEnabler = \Drupal::service('plugin.manager.group_content_enabler');
      $plugins = $groupContentEnabler->getGroupTypePluginMap ();
      $availablePlugins = $plugins[$groupTypeId];

      /** @var \Drupal\Core\Entity\EntityInterface $entity */
      $entity = $formState->getFormObject ()->getEntity();
      $plugin_id = 'group_entity:'.$entity->getEntityTypeId ();
      if (in_array($plugin_id, $availablePlugins)) {
        $formState->set('group', $group);
        $formState->set('group_content_enabler', $plugin_id);
        foreach (Element::children($form['actions']) as $name) {

          // Skip buttons without submit handlers.
          if (empty($form['actions'][$name]['#submit'])) {
            continue;
          }

          // Skip buttons that do not properly build and save an entity.
          $submit = $form['actions'][$name]['#submit'];
          if (!in_array ('::submitForm', $submit) || !in_array ('::save', $submit)) {
            continue;
          }

          // If we are using the wizard, we need to substitute the entity save
          // handler in order to add the entity to the private temp store.
          $form['actions'][$name]['#submit'][] = 'group_content_entity_submit';
        }
      }
    }
  }
}

/**
 * Implements hook_views_pre_build().
 */
function vsite_views_pre_build(ViewExecutable $view) {
  if (!empty($view->filter['current_vsite_filter'])) {
    $view->element['#cache']['tags'][] = 'vsite:current_vsite_filter';
  }
}
